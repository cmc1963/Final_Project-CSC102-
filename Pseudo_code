### The PseudoCode for Alpha Version ###
This program will produce the game Tetris on a sense hat.
The user will be able to rotate the block, move left, and move right. The objective of the game is to move and rotate falling shapes to form complete rows at the bottom of the game, hence a tetris if 4 rows is complete.

### VARIABLES ###
import time, sense_hat, numpy, sys, and random
give the sense_hat.SenseHat() a variable, then follow it with:
sense.clear()

Variables that need to be initialized through sense_hat:
leftkey
rightkey
upkey
pressed
released

Create an assumed squared(same width and height) for the LED matrix. Preferably 10

Create variables that need to be declared before the main game loop
lft = 0.0
timeCounter = 0.0
score = 0
interval = gameSpeed
gameOver = False
playfield = np.zeros((palyfieldSize,playfieldSize))

Create borders outside of LED matrix using a for loop
for i in range(0,playfieldSize):
    playfield[i][Size - 1] = 1
    playfield[0][i] = 1
    playfield[Size -1][i] = 1

Represent the block types in hexadecimal
For example:
010
010 = striaght, vertical, 3block line
010
Creating 010010010 side by side, one multiples the binary number by 2 which in this case is 92(16) so 0x92 is the outcome
blockData = np.array([
    [Straight Line]
    [Square Box]
    [T Shape]
    [L Shape]
])

Add color to the boxes using rgb values
blockColors = {
    4 different colors
}

Create Active Blocks that equal None type for the starting position: x, y, type, and direction

### Generating Methods for the Blocks ###
def generateBlock():
    global activeBlocks
    x = 1
    y = int()
    type = randint(0,blockData.shape[0]-1)
    direction = randint()

def drawActiveBlock():
    k =int()
    for i in range(y -1, y +2):
        m = 1
        for j in range(x -1, x +2):
            if(blockData[type][dircetion]&1 << ((k*int())-m)):
                if (j - 1 >= 0):
                    sense.set_pixel(i-1,j-1, blockcolors[type+1])
            m = m + 1
        k = k - 1

def checkCollision(dx,dy):
    k =int()
        for i in range(y -1, y +2):
            m = 1
            for j in range(x -1, x +2):
                if(blockData[type][dircetion]&1 << ((k*int())-m)):
                    if(playfield[i + dy][j + dx] != 0):
                        return True
                m = m + 1
            k = k - 1
        return False

def lockBlock():
    k =int()
    for i in range(y -1, y +2):
        m = 1
        for j in range(x -1, x +2):
            if(blockData[type][dircetion]&1 << ((k*int())-m)):
                playfield[i][j] = type + 1
            m = m + 1
        k = k - 1

def drawPlayfield():
    for i in range():
        for j in range():
            sense.set_pixel(i,j blockColors[playfield[i+1][j+1]])

def checkForLine():
    Count = 0
    i = amount of blocks in row on the sensehat
    while i > 0:
        brickCount = 0
        for j in range():
            if playfield[j][i] != 0:
                brickCount += 1
        if brickCount == all blocks in row
            for j in range():
                playfield[j][i] = 0
            Count += 1
            for k in range(i,1,-1):
                for m in range():
                    playfields[m][k] = playfields[m][k-1]
            i += 1
        i -=1
    return Count

initialize the first block because there is no need to check for collisions in the beginning

### MAIN GAME ###
while True:
    t = time.time()
    tdelta = t - lft
    lft = t
    timeCounter += tdelta

    Create a variable that initializes the sense.stick
    events = sense.stick.get_events()
    if events:
        for e in events:
            #Moving a block left
            if e.direction == left_key and e.action == pressed:
                if not checkCollision(0,-1):
                    y -= 1
            
            #Moving a block right
            if e.direction == right_key and e.action == pressed:
                if not checkCollision(0,1):
                    y += 1

            #Rotating a block
            if e.direction == up_key and e.action == pressed:
                tmpDir = direction
                direction = (direction + 1) modulus int()
                if checkCollision(0,0):
                    direction = tmpDir

            if e.direction == down_key and e.action == pressed and gameOver:
                gameOver = False
                sense.clear()
                sys.exit()
    if(timeCounter > interval):
        timeCounter = 0
        if not gameOver:
            if not checkCollision(1,0);
                x += 1
            else:
                lockBlock()
                eliminated = checkForLine()
                if eleminated == 1:
                    score += 4
                elif eleminated == 2:
                    score += 10
                elif eleminated == 3:
                    score += 30
                elif eleminated == 4:
                    score += 120
                genereateBlock()
                if checkCollision(0,0):
                    for k in range ():
                        sense.clear(rgb value)
                        time.sleep(float())
                        sense.clear(rgb value)
                        time.sleep(float())
                    sense.show_message("YOU SUCK, TRY AGN", scroll_speed=float())
                    msg = str(score) + " pts!"
                    sense.show_message(msg, scroll_speed=float())
                    clearPlayground();
                    gameOver = True 
            drawPlayfield()
            drawActiveBlock()


            





